Нельзя давать переменным такие имена, которые совпадают с зарезервированными ключевыми словами. В JavaScript.
Список зарезервированных слов в JavaScript:

await, break, case, catch, class, const, continue, debugger, default, delete, do, else, enum, export, extends, false, finally, for, function, if, import, in, instanceof, new, null, return, super, switch, this, throw, true, try, typeof, var, void, while, with, yield.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Замыкание (closure) представляют собой конструкцию, когда функция, созданная в одной области видимости, запоминает свое лексическое окружение даже в том случае, когда она выполняет вне своей области видимости.

Замыкание технически включает три компонента:

внешняя функция, которая определяет некоторую область видимости и в которой определены некоторые переменные - лексическое окружение

переменные (лексическое окружение), которые определены во внешней функции

вложенная функция, которая использует эти переменные
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Все используемые данные в javascript имеют определенный тип. В JavaScript имеется восемь типов данных:

String: представляет строку (используется, чтобы представить и конструировать последовательность символов) -Если внутри строки встречаются кавычки, то мы их должны экранировать слешем (let company = "Бюро \"Рога и копыта\"";)

Number: представляет числовое значение которые могут быть целыми или дробными: (Диапазон используемых чисел: от -2 в 53 степени до 2 в 53 степени) краткое вычеслние это от -9007199254740991 до 9007199254740991.

BigInt: предназначен для представления очень больших целых чисел которые выходят за пределы диапазона типа number все что выше 9007199254740991. Для определения числа как значения типа BigInt в конце числа добавляется суффикс n:

Boolean: представляет логическое значение true или false(  верно (true) и ложью (false))

Undefined: представляет одно специальное значение - undefined указывает, что значение не определено или не установлено. Например, когда мы только определяем переменную без присвоения ей начального значения, она представляет тип undefined

Null: представляет одно специальное значение - null и указывает на отсутствие значения

Symbol: представляет уникальное значение, которое часто применяется для обращения к свойствам сложных объектов

Object: представляет комплексный объект (представляет сложный, комплексный тип данных, который состоит из значений примитивных типов или других объектов) Простейшее определение объекта представляют фигурные скобки.

-------------------------------------------------------------------------------------------------------------------------------------------------------

Оператор ** возводит число в определенную степень.

*=
Возведение в степень с последующим присвоением результата: 
let x = 5;
x **= 2;
console.log(x);  // 25

/=
Деление с последующим присвоением результата

== /
Оператор равенства сравнивает два значения, и если они равны, возвращает true, иначе возвращает false: x == 5

=== /
Оператор тождественности также сравнивает два значения и их тип, и если они равны, возвращает true, иначе возвращает false: x === 5

!= /
Сравнивает два значения, и если они не равны, возвращает true, иначе возвращает false: x != 5

!== /
Сравнивает два значения и их типы, и если они не равны, возвращает true, иначе возвращает false: x !== 5

-----------------------------------------------------------------------------------------------------------------

parseFloat
Для преобразования строк в дробные числа применяется функция parseFloat(), которая работает аналогичным образом
let number1 = "46.07";
let number2 = "4.98";
let result = parseFloat(number1) + parseFloat(number2);
console.log(result); //51.05

-------------------------------------------------------------------------------------------------------------------

ЦИКЛЫ: позволяют в зависимости от определенных условий выполнять некоторое действие множество раз. В JavaScript имеются следующие виды циклов:

for

for..in

for..of

while

do..while

----------------------------------------------------------------------------------------------------------------------------------------------------------

let vs var
Когда let используется внутри блока, то область видимости переменной ограничивается этим блоком. Напомним, что отличие заключается в том, что областью видимости переменных, объявленных директивой var, является вся функция, в которой они были объявлены.
